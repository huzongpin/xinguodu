   /arch：目录包括了所有和体系结构相关（cpu）的核心代码。它下面的每一个子目录都代表一种linux支持的体系结构，例如i386就是Intel CPU及与之相兼容体系结构的子目录。PC机一般都基于此目录。

　　/documentation：目录下是一些文档，没有内核代码，可惜都是English的，是对每个目录作用的具体说明。

　　/drivers：目录中是系统中所有的设备驱动程序。它又进一步划分成几类设备驱动，每一种有对应的子目录，如声卡的驱动对应于/drivers/sound；block 下为块设备驱动程序，比如ide（ide.c）。如果你希望查看所有可能包含文件系统的设备是如何初始化的，你可以看/drivers/block/genhd.c中的device_setup()。它不仅初始化硬盘，也初始化，因为安装nfs文件系统的时候需要网络。其他: 如, Lib放置核心的库代码; Net,核心与网络相关的代码; Ipc,这个目录包含核心的进程间通讯的代码; Fs,所有的文件系统代码和各种类型的文件操作代码，它的每一个子目录支持一个文件系统，例如fat和ext2。

　　/fs：目录存放Linux支持的文件系统代码和各种类型的文件操作代码。每一个子目录支持一个文件系统，如ext3文件系统对应的就是ext3子目录

　　/include：目录包括编译核心所需要的大部分头文件，例如与平台相关的头文件在/include/linux子目录下，与intel cpu相关的头文件在/include/asm-i386子目录下,而/include/scsi目录则是有关scsi设备的头文件目录。

　　/init：目录包含核心的初始化代码（不是系统的引导代码），有main.c和Version.c两个文件。这是研究核心如何工作的好起点。

　　/ipc：目录包含了核心进程间的通信代码。

　　/Kernel：内核管理的核心代码，此目录下的文件实现了大多数linux系统的内核函数，其中最重要的文件当属sched.c；同时与处理器结构相关代码都放在/arch/*/kernel目录下。

　　/lib：目录包含了核心的库代码，不过与处理器结构相关的库代码被放在/arch/*/lib/目录下。

　　/mm：目录包含了所有独立于 cpu 体系结构的内存管理代码，如页式存储管理内存的分配和释放等。与具体硬件体系结构相关的内存管理代码位于/arch/*/mm目录下，例如/arch/i386/mm/Fault.c 。

　　/net：目录里是核心的网络部分代码，实现了各种常见的网络协议，其每个子目录对应于网络的一个方面。

　　/scripts：目录包含用于配置核心的脚本文件等

　　/block：块设备驱动程序I/O调度。

　　/crypto：常用加密和散列算法（如AES,SHA等），还有一些压缩和CRC校验算法。

　　/security：主要包含SELinux模块。

　　/sound：ALSA,OSS音频设备的驱动核心代码和常用设备驱动。

　　/usr：实现了用于打包和压缩的cpio等。
  
  
  假设想把自己写的一个flash的驱动程式加载到工程中，而且能够通过menuconfig配置内核时选择该驱动该怎么办呢？能够分三步：
第一：将您写的flashtest.c 文档添加到/driver/mtd/maps/ 目录下。
第二：修改/driver/mtd/maps目录下的kconfig文档：
config MTD_flashtest
tristate “ap71 flash"
这样当make menuconfig时 ，将会出现 ap71 flash选项。
第三：修改该目录下makefile文档。
添加如下内容：obj-$(CONFIG_MTD_flashtest)    += flashtest.o
这样，当您运行make menucofnig时，您将发现ap71 flash选项，假如您选择了此项。该选择就会保存在.config文档中。当您编译内核时，将会读取.config文档，当发现ap71 flash 选项为yes 时，系统在调用/driver/mtd/maps/下的makefile 时，将会把 flashtest.o 加入到内核中。即可达到您的目的


vIMtutor：：
  wget -qO- https://raw.github.com/ma6174/vim/master/setup.sh | sh -x

 vim学习命令：命令行输入 vimtutor

 http://blog.csdn.net/yaoxiaokui/article/details/49153179
