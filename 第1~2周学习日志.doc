第1~2周学习日志
                                                                                                 --20170711
1、开发环境搭建：
  1.1编译环境  
   安装->VMware12->ubuntu16（设置帐号密码）  。
    1.ubuntu不能全屏显示->  安装vmware-tools-distrib解决。
    2.更改为中文界面。修改网络设置->打开系统设置->配置网络，语言，下载源更新。
    3.在命令行模式下 ：将freescale.tar.bz2放到 /opt下解压（tar -jxvf）。ubuntu16是64位的：arm-linux-gcc是32位。需要sudo apt-get install lsb-core
      ；修改sh默认链接到bash: sudo dpkg-reconfigure dash 选择no。
    4.vim编译环境设置。配置网上找。->sudo vim/etc/vim/vimrc->输入密码更改。
    5.写hello.c,  ->gcc hello.c->生成.out ->./a.out  ->hello,world。 
     TEST->在test文件夹下打开命令行 执行make clean-> make->  /opt/freescale/usr/local/gcc-4.1.2-glibc-2.5-nptl-3/arm-none-linux-gnueabi/bin/arm-none-linux-gnueabi-gcc khmer_test.c -I./inc -I./inc/fribidi -o khmer_test -L./lib -ldev -ldl -lfribidi -lpthread
     编译完成。
     
   1.2samba服务器
   虚拟机环境下，root模式-安装samba  完成设置;
    安装openSSH Server ;执行sudo ps -e |grep ssh->回车->有sshd,说明ssh服务已经启动。
   1.3 secureCRT
     1.安装secureCRT 
     2.在windows端 运行 \\ip地址\用户名（\\192.168.182.100\huzongpin）；crt连接。
     3.中文乱码的话 外观改utf-8。
     4.CRTFx乱码的话  修改- C:\Users\huzongpin\Desktop\securcrt\SecureCRSecureFXPortable64\Data\Settings\Config\Sessions -
       192.168.182.100的配置文件：->Filenames Always Use UTF8 的值由00000000，修改为00000001。
2. source-insight使用**
    新建个工程，然后加入代码路径（映射的盘），然后->add tree，然后再projec菜单下->同步文件。
    中文注释乱码解决方法：Options->Preferences->Files->Default Encoding->gb2 312_193，需要重建项目.
 
3.Linux shell（默认使用Bash）  
            /***************************/要求 使用shell编写脚本打印当前目录下所有文件
 命令行解释器->传给系统内核      
    提示符：$-普通用户  #-超级用户   *-任意长度字符串  ？-任意单个字符
    字符#开头的正文表注释行
    1. eg: hello.sh
     crt命令行 ->vi hello.sh  
        #！bin/sh
        echo "hello linux!"
     之后 sh hellowd.sh  
    2.linux根据 #! 确定后面的文件类型
    3.echo 输出
    4.Bash 结尾处没有分号
    5，关于定义变量   只要之前没有定义过，后续就能直接使用。    必须在变量前加$。
    6.shell输入->read 函数
    7.shell中的数组  
     支持一维数组 不限定大小 
     取值方式是${a[]}，其余类似c。  a[@]、a[*]可以遍历整个数组。
    8. chmod +x (..).sh    添加可运行权限    执行./（..）.sh。
        # 是 去掉左边（键盘上#在 $ 的左边）
        %是去掉右边（键盘上% 在$ 的右边）
         单一符号是最小匹配；两个符号是最大匹配
        ${file:0:5}：提取最左边的 5 个字节
        ${file:5:5}：提取第 5 个字节右边的连续5个字节
    9. shell脚本报错：-bash: xxx: /bin/sh^M    执行dos2unix 改文件格式
      9.1 赋值运算时=号两边不能使用空格。
      9.2 命令与选项之间需要空格。
    10.tree指令 树状显示出当前目录下所有文件
    11.sed
        -e允许多重编辑
       sed 's///g'     g是一个全局的作用
      替换一行中的某部分  格式：sed 's/ 要替换的字符串/ 新的字符串/g ' 
        +g :匹配每一行有行首到行尾的所有字符
        不+g:匹配每一行的行首开始匹配，匹配到第一个符合的字段，就会结束，跳到下一行 
        # sed -n '2,$p' ab         #显示第二行到最后一行
        /^ */ 匹配以空格开头的字符
        /[^/]*$   意思是以任意个不为/的字符结尾，且这个字符串前面有/。比如/home/user中，/user就满足情况
     12.awk
         -F /表示以’/’分开域 
         NF 输出读取记录的域的个数
         awk -F: '{print NF}'  //显示每行有多少字段
     13.文本过滤工具（grep） 
     
     13.find
     14.整数比较
　　   >或者<或者=是用于字符串的比较，如果用于整数比较，使用：
      -lt，小于 ；-le，小于等于 ； -eq，等于； - ge，大于等于； -gt，大于；  -ne，不等于

4.GNU Linux 64位系统中fatal error: stdio.h: 没有那个文件或目录的错误的解决方法 :   32位一般不会出现->
  4.1可以在命令行输入如下的命令进行安装：  sudo apt-get install  build-essential
    也可以单个包进行安装，如：sudo apt-get install libc6-dev    
  4.2 检查头文件的书写
  
5.Makefile
   5.1参考网址：http://blog.csdn.net/liang13664759/article/details/1771246/
    实现自动化编译
 5.2 规则：
   1）如果这个工程没有编译过，那么我们的所有 C 文件都要编译并被链接。
   2）如果这个工程的某几个 C 文件被修改，那么我们只编译被修改的 C 文件，并链接目标。
   3）如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的 C 文件，并链接目标程序
 5.3   格式 ：
    target ... : prerequisites ...
       command
  target->目标文件 、执行文件、objectfile、label。
  prerequisites->依赖文件 生成那个 target 所需要的文件或是目标。
  command -> 命令（Makefile的规则）->任意的shell命令。
  
  5.4 反斜杠（\）是换行符
    命令总是以tab开始
    可以盛名一个变量代表某一类相同的文件 比如 obj= *.o；
    make可以自动推导文件以及文件依赖关系后面的命令，没必要去在每一个[.o]文件后都写上类似的命令，make会自动识别，并自己推导。（隐晦规则）
  5.5 
  .PHONY=clean
  clean：
      -rm aa.out $(obj) 
  每个 Makefile 中都应该写一个清空目标文件（.o 和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁。
  .PHONY 意思表示 clean 是一个“伪目标”，。而在 rm 命令前面加了一个 - ,是也许某些文件出现问题，但不要管，继续做后面的事。
 5.6 mkae 
   显式规则（明显写的） 隐晦规则（自动推导的）  定义变量  文件指示（引用、#if、定义多行命令）  注释（\#)
 5.7Makefile的文件名
   最好Makefile
5.8
  在Makefile中可以如同#include那样包含其他的Makefile。
  如果 make 执行时，有“-I”或“--include-dir”参数，那么 make 就会在这个参数所指定的目录下去寻找。
5.9 文件搜寻
 5.9.1特殊变量“VPATH”
   VPATH = src:../headers
  定义指定两个目录，“src”和“../headers”，make会按照这个顺序进行搜索。目录由“冒号”分隔。（当前目录永远是最高优先搜索的地方）
 5.9.2  make 的关键字 path
   可以指定不同的文件在不同的搜索目录中
 5.10支持多目标
   自动化变量“$@” 表示当前规则中所有目标的集合。
 5.11 自动生成依赖性
    -M 编译器自动找寻源文件中包含的头文件，并生成一个依赖关系。 gnu下用-MM。
    Euclid 算法
  规范软件编写，便于移植和维护。
    
  
  
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
