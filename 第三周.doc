1. 编码风格
  1.1 缩进和空白
      1.1.1 关键字 if、 while、 for 与其后的控制表达式的(括号之间插入一个空格分隔，但括号内的表达式应紧贴括号。
      1.1.2 双目运算符的两侧各插入一个空格分隔，单目运算符和操作数之间不加空格，例如 i␣ =␣ i␣ +␣ 1、 ++i、 !(i␣ <␣ 1)、 -x、 &a[1]等。
      1.1.3 后缀运算符和操作数之间也不加空格，例如取结构体成员 s.a、函数调用foo(arg1)、取数组成员 a[i]。
      1.1.4  ,号和;号之后要加空格，这是英文的书写习惯，例如 for␣ (i␣ =␣ 1;␣ i␣ <␣ 10;␣ i++)、 foo(arg1,␣ arg2)。
      1.1.5 较长的字符串可以断成多个字符串然后分行书写。
    内核代码风格关于缩进的规则：
      1 要用缩进体现出语句块的层次关系，使用 Tab 字符缩进，不能用空格代替Tab。
      2  if/else、 while、 do/while、 for、 switch 这些可以带语句块的语句，语句块的{或}应该和关键字写在同一行，用空格隔开，而不是单独占一行。
      3 函数定义的{和}单独占一行。
      4 switch 和语句块里的 case、 default 对齐写，也就是说语句块里的 case、default 标号相对于 switch 不往里缩进，但标号下的语句要往里缩进。
      5 代码中每个逻辑段落之间应该用一个空行分隔开。
      6、一个函数的语句列表如果很长，也可以根据相关性分成若干组，用空行分隔。
   1.2  注释  
      1.2.1 用空格把界定符和文字分开。 整个源文件的顶部注释。说明此模块的相关信息，例如文件名、作者和版本历史等，顶头写不缩进。
      1.2.2 函数注释。说明此函数的功能、参数、返回值、错误码等，写在函数定义上侧，和此函数定义之间不留空行，顶头写不缩进。
      1.2.3 相对独立的语句组注释。写在语句组上侧，和此语句组之间不留空行，与当前语句组的缩进一致。
      1.2.4 代码行右侧的简短注释。对当前代码行做特别说明，一般为单行注释，和代码之间至少用一个空格隔开，一个源文件中所有的右侧注释最好能上下对齐。
      1.2.5 复杂的结构体定义比函数更需要注释
      1.2.6 复杂的宏定义和变量声明也需要注释。
   1.3 标识符命名
      1.3.1 标识符命名要清晰明了，可以使用完整的单词和易于理解的缩写。
      1.3.2 内核编码风格规定变量、函数和类型采用全小写加下划线的方式命名，常量（比如宏定义和枚举常量）采用全大写加下划线的方式命名。
      1.3.3 全局变量和全局函数的命名一定要详细。禁止用汉语拼音做标识符，可读性极差。
    1.4  indent 工具可以把代码格式化成某种风格。  -kr 选项表示 K&R 风格， -i8 表示缩进 8 个空格的长度。
      注释 ：  k&r风格: 缩进一个水平制符,k&r提倡8格.左花括号紧接其后不另起一行(函数体的左括号除外).
  2. Euclid 算法  求最大公约数。   *[TAOCP]和[算法导论]。
 
